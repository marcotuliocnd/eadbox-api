const axios=require("axios");exports.makeLoginFromEmailAndPassword=(async(r,e)=>{try{return(await axios.post(r+"/api/login",e)).data}catch(r){return err}}),exports.getUserAuthTokenFromLogin=(async(r,e)=>{try{return(await this.makeLoginFromEmailAndPassword(r,e)).authentication_token}catch(r){return r}}),exports.addCourseForUser=(async(r,e,t,a)=>{const o=await this.getUserIdFromName(r,e,t),s=r+"/api/admin/subscriptions?auth_token="+e,n=await this.getCourseIdFromName(r,e,a);try{return(await axios.post(s,{user_id:o,course_id:n})).data.valid}catch(r){return console.warn(r),console.error("Não foi possível alcançar o host destino"),!1}}),exports.getCourseIdFromName=(async(r,e,t)=>{const a=await this.getAllCourses(r,e);for(courseArray of a)for(course of courseArray)if(course.title==t)return course.course_id}),exports.createNewUser=(async(r,e)=>{try{return(await axios.post(r+"/api/signup",e)).data}catch(r){return r}}),exports.updateUserInformation=(async(r,e,t,a)=>{urlWithToken=r+"/api/admin/users/"+t+"?auth_token="+e;try{return(await axios.patch(urlWithToken,a)).data.valid}catch(r){return console.warn(r),console.error("Não foi possível enviar a requisição de updateUserInformation"),!1}}),exports.blockUser=(async(r,e,t)=>{const a=r+"/api/admin/users/"+await this.getUserIdFromName(r,e,t)+"?auth_token="+e;try{return(await axios.delete(a)).data.valid}catch(r){return console.warn(r),console.error("Não foi possível alcançar o host destino"),!1}}),exports.getUserIdFromName=(async(r,e,t)=>{const a=await this.getAllUsersActive(r,e);for(userArray of a)for(user of userArray)if(user.name==t)return user.user_id}),exports.getNumberOfUsers=(async(r,e)=>{let t=await this.getAllUsersActive(r,e),a=0;for(let r of t)a+=r.length;return a}),exports.getAllUsersActive=(async(r,e)=>{let t,a,o=[],s=1;for(;;){try{t=r+"/api/admin/users?page="+s+"&active=true&auth_token="+e,a=await axios.get(t)}catch(r){return[]}if(null==a.data[0])break;o.push(a.data),s++}return o}),exports.unBlockUser=(async(r,e,t)=>{const a=r+"/api/admin/users/"+await this.getUserIdLockedFromName(r,e,t)+"/unlock?auth_token="+e;try{return(await axios.post(a)).data.valid}catch(r){return console.warn(r),console.error("Não foi possível alcançar o host destino"),!1}}),exports.getUserIdLockedFromName=(async(r,e,t)=>{const a=await this.getAllUsersLocked(r,e);for(userArray of a)for(user of userArray)if(user.name==t)return user.user_id}),exports.getNumberOfUsersLocked=(async(r,e)=>{let t=await this.getAllUsersLocked(r,e),a=0;for(let r of t)a+=r.length;return a}),exports.getAllUsersLocked=(async(r,e)=>{let t,a,o=[],s=1;for(;;){try{t=r+"/api/admin/users?page="+s+"&locked=true&auth_token="+e,a=await axios.get(t)}catch(r){return[]}if(null==a.data[0])break;o.push(a.data),s++}return o}),exports.getNumberOfCourses=(async(r,e)=>{let t=await this.getAllCourses(r,e),a=0;for(let r of t)a+=r.length;return a}),exports.getAllCourses=(async(r,e)=>{let t,a,o=[],s=1;for(;;){try{t=r+"/api/admin/courses?page="+s+"&auth_token="+e,a=await axios.get(t)}catch(r){return[]}if(null==a.data[0])break;o.push(a.data),s++}return o}),exports.getNumberOfTracks=(async(r,e)=>{let t=await this.getAllTracks(r,e),a=0;for(let r of t)a+=r.length;return a}),exports.getAllTracks=(async(r,e)=>{let t,a,o=[],s=1;for(;;){try{t=r+"/api/admin/tracks?page="+s+"&active=true&auth_token="+e,a=await axios.get(t)}catch(r){return[]}if(null==a.data[0])break;o.push(a.data),s++}return o}),exports.getScoreRanking=(async r=>{try{return(await axios.get(r+"/api/rankings/score")).data}catch(r){console.error("Não foi possível geral o ranking por score"),console.error(r)}}),exports.getBadgeRanking=(async r=>{try{return(await axios.get(r+"/api/rankings/badges")).data}catch(r){console.error("Não foi possível geral o ranking por badges"),console.error(r)}}),exports.getCollectorRanking=(async r=>{try{return(await axios.get(r+"/api/rankings/collectors")).data}catch(r){console.error("Não foi possível geral o ranking por collectors"),console.error(r)}});
