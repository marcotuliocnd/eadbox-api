const axios=require("axios");exports.makeLoginFromEmailAndPassword=(async(e,r)=>{try{return(await axios.post(e+"/api/login",r)).data}catch(e){return err}}),exports.getUserAuthTokenFromLogin=(async(e,r)=>{try{return(await this.makeLoginFromEmailAndPassword(e,r)).authentication_token}catch(e){return e}}),exports.createNewUser=(async(e,r)=>{try{return(await axios.post(e+"/api/signup",r)).data}catch(e){return e}}),exports.updateUserInformation=(async(e,r,t,a)=>{urlWithToken=e+"/api/admin/users/"+t+"?auth_token="+r;try{return(await axios.patch(urlWithToken,a)).data.valid}catch(e){return console.warn(e),console.error("Não foi possível enviar a requisição de updateUserInformation"),!1}}),exports.blockUser=(async(e,r,t)=>{const a=e+"/api/admin/users/"+await this.getUserIdFromName(e,r,t)+"?auth_token="+r;try{return(await axios.delete(a)).data.valid}catch(e){return console.warn(e),console.error("Não foi possível alcançar o host destino"),!1}}),exports.getUserIdFromName=(async(e,r,t)=>{const a=await this.getAllUsersActive(e,r);for(userArray of a)for(user of userArray)if(user.name==t)return user.user_id}),exports.getNumberOfUsers=(async(e,r)=>{let t=await this.getAllUsersActive(e,r),a=0;for(let e of t)a+=e.length;return a}),exports.getAllUsersActive=(async(e,r)=>{let t,a,o=[],s=1;for(;;){try{t=e+"/api/admin/users?page="+s+"&active=true&auth_token="+r,a=await axios.get(t)}catch(e){return[]}if(null==a.data[0])break;o.push(a.data),s++}return o}),exports.unBlockUser=(async(e,r,t)=>{const a=e+"/api/admin/users/"+await this.getUserIdLockedFromName(e,r,t)+"/unlock?auth_token="+r;try{return(await axios.post(a)).data.valid}catch(e){return console.warn(e),console.error("Não foi possível alcançar o host destino"),!1}}),exports.getUserIdLockedFromName=(async(e,r,t)=>{const a=await this.getAllUsersLocked(e,r);for(userArray of a)for(user of userArray)if(user.name==t)return user.user_id}),exports.getNumberOfUsersLocked=(async(e,r)=>{let t=await this.getAllUsersLocked(e,r),a=0;for(let e of t)a+=e.length;return a}),exports.getAllUsersLocked=(async(e,r)=>{let t,a,o=[],s=1;for(;;){try{t=e+"/api/admin/users?page="+s+"&locked=true&auth_token="+r,a=await axios.get(t)}catch(e){return[]}if(null==a.data[0])break;o.push(a.data),s++}return o}),exports.getNumberOfCourses=(async(e,r)=>{let t=await this.getAllCourses(e,r),a=0;for(let e of t)a+=e.length;return a}),exports.getAllCourses=(async(e,r)=>{let t,a,o=[],s=1;for(;;){try{t=e+"/api/admin/courses?page="+s+"&auth_token="+r,a=await axios.get(t)}catch(e){return[]}if(null==a.data[0])break;o.push(a.data),s++}return o}),exports.getNumberOfTracks=(async(e,r)=>{let t=await this.getAllTracks(e,r),a=0;for(let e of t)a+=e.length;return a}),exports.getAllTracks=(async(e,r)=>{let t,a,o=[],s=1;for(;;){try{t=e+"/api/admin/tracks?page="+s+"&active=true&auth_token="+r,a=await axios.get(t)}catch(e){return[]}if(null==a.data[0])break;o.push(a.data),s++}return o}),exports.getScoreRanking=(async e=>{try{return(await axios.get(e+"/api/rankings/score")).data}catch(e){console.error("Não foi possível geral o ranking por score"),console.error(e)}}),exports.getBadgeRanking=(async e=>{try{return(await axios.get(e+"/api/rankings/badges")).data}catch(e){console.error("Não foi possível geral o ranking por badges"),console.error(e)}}),exports.getCollectorRanking=(async e=>{try{return(await axios.get(e+"/api/rankings/collectors")).data}catch(e){console.error("Não foi possível geral o ranking por collectors"),console.error(e)}});
